(def take
     (phi [(0 _) ()]
          [(n (x . xs)) `(,x . ,(take (- n 1) xs))]))

(e.g. (take 3 '(q w e r t y)) ===> (q w e))

(def drop
     (phi [(0 xs) xs]
          [(n (x . xs)) (drop (- n 1) xs)]))

(e.g. (drop 3 '(q w e r t y)) ===> (r t y))

(def length
     (phi [(()) 0]
          [((x . xs)) (+ 1 (length xs))]))

(e.g. (length '(q w e)) ===> 3)


(def merge
     (phi [(() xs) xs]
          [(xs ()) xs]
          [((x . xs) (y . ys)) (if (< x y)
                                   `(,x . ,(merge xs `(,y . ,ys)))
                                   `(,y . ,(merge `(,x . ,xs) ys)))]))

(e.g. (merge '(1 2 6) '(3 8 9)) ===> (1 2 3 6 8 9))


(def msort
     (phi [(()) ()]
          [((x)) `(,x)]
          [(xs) (let ([xs-len (length xs)]
                      [xs1 (take (/ xs-len 2) xs)]
                      [xs2 (drop (/ xs-len 2) xs)])
                  (merge (msort xs1) (msort xs2)))]))

(e.g. (msort '(1 2 2 7 5 3 -1 3 8 9 1 2 3 4 5 6 4 3 -2 1 1 7 8 9 6))
      ===> (-2 -1 1 1 1 1 2 2 2 3 3 3 3 4 4 5 5 6 6 7 7 8 8 9 9))


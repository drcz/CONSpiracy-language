(def take
     (bind (0 _) ()
	   (n (x . xs)) `(,x . ,(take (- n 1) xs))))

(def drop
     (bind (0 xs) xs
	   (n (x . xs)) (drop (- n 1) xs)))

(def length
     (bind (()) 0
	   ((x . xs)) (+ 1 (length xs))))

(def merge
     (bind (() xs) xs
	   (xs ()) xs
	   ((x . xs) (y . ys)) (if (< x y)
				   `(,x . ,(merge xs `(,y . ,ys)))
				   `(,y . ,(merge `(,x . ,xs) ys)))))

(def msort
     (bind (()) ()
     	   ((x)) `(,x)
	   (xs) (let ((xs-len (length xs))
		      (xs1 (take (/ xs-len 2) xs))
		      (xs2 (drop (/ xs-len 2) xs)))
		  (merge (msort xs1) (msort xs2)))))

(&with-time (msort '(1 2 2 7 5 3 1 3 8 9 1 2 3 4 5 6 4 3 2 1 1 7 8 9 6)))
